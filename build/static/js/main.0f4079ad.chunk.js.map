{"version":3,"sources":["BooksAPI.js","Book.js","Main.js","search.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","search","query","data","books","Book","_this$props","this","props","onUpdateShelf","react_default","a","createElement","className","undefined","imageLinks","style","width","height","backgroundImage","thumbnail","background","onChange","e","target","value","disabled","title","authors","map","author","i","length","Component","Main","currentlyReading","filter","wantToRead","read","src_Book","key","react_router_dom","to","Search","state","results","updateResult","result","_this","setState","updateQuery","q","searchBooks","trim","BooksAPI","_this2","_this$state","type","placeholder","event","findIndex","x","error","BooksApp","showSearchPage","updateShelf","currentState","_this3","react_router","exact","path","render","src_Main","src_search","React","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.0f4079ad.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Book extends Component {\r\n\r\n    static propTypes = {\r\n        book: PropTypes.object.isRequired,\r\n        onUpdateShelf: PropTypes.func.isRequired\r\n    }\r\n\r\n    render() {\r\n\r\n        const { onUpdateShelf, book } = this.props\r\n\r\n        return (\r\n            <li>\r\n                <div className=\"book\">\r\n                    <div className=\"book-top\">\r\n                        {\r\n                            //show thumbnail of book exists. If it doesn't show a gray background\r\n                            book.imageLinks !== undefined ?\r\n                                <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: 'url( ' + book.imageLinks.thumbnail + ')' }}></div>\r\n                                : <div className=\"book-cover\" style={{ width: 128, height: 193, background: 'gray' }}></div>\r\n                        }\r\n                        <div className=\"book-shelf-changer\">\r\n\r\n                            <select onChange={(e) => onUpdateShelf(book, e.target.value)} value={book.shelf}>\r\n                                <option value=\"move\" disabled>Move to...</option>\r\n                                <option value=\"currentlyReading\">Currently Reading</option>\r\n                                <option value=\"wantToRead\">Want to Read</option>\r\n                                <option value=\"read\">Read</option>\r\n                                <option value=\"none\">None</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"book-title\">{book.title}</div>\r\n                    <div className=\"book-authors\">\r\n                        {\r\n\r\n                            book.authors !== undefined &&\r\n                            book.authors.map((author, i) => (\r\n                                book.authors.length - 1 !== i ? author + \", \" : author\r\n                            ))\r\n\r\n                        }\r\n                    </div>\r\n\r\n                </div>\r\n            </li>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Book","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import * as BooksAPI from './BooksAPI'\r\nimport { Link } from 'react-router-dom'\r\nimport Book from './Book'\r\n\r\nclass Main extends Component {\r\n    static propTypes = {\r\n        books: PropTypes.array.isRequired,\r\n        onUpdateShelf: PropTypes.func.isRequired\r\n    }\r\n    render() {\r\n\r\n        const { books, onUpdateShelf } = this.props\r\n\r\n        const currentlyReading = books.filter((book) => (\r\n            book.shelf === \"currentlyReading\"\r\n        ))\r\n        const wantToRead = books.filter((book) => (\r\n            book.shelf === \"wantToRead\"\r\n        ))\r\n        const read = books.filter((book) => (\r\n            book.shelf === \"read\"\r\n        ))\r\n\r\n        return (\r\n            <div className=\"app\">\r\n                <div className=\"list-books\">\r\n                    <div className=\"list-books-title\">\r\n                        <h1>MyReads</h1>\r\n                    </div>\r\n                    <div className=\"list-books-content\">\r\n                        <div>\r\n                            {currentlyReading.length > 0 &&\r\n                                //Display only if there are books on the \"currentlyReading\" shelf\r\n                                <div className=\"bookshelf\">\r\n                                    <h2 className=\"bookshelf-title\">Currently Reading</h2>\r\n                                    <div className=\"bookshelf-books\">\r\n                                        <ol className=\"books-grid\">\r\n                                            {currentlyReading.map((book) => (\r\n                                                <Book\r\n                                                    key={book.id}\r\n                                                    book={book}\r\n                                                    onUpdateShelf={onUpdateShelf}\r\n                                                />\r\n                                            ))}\r\n                                        </ol>\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n\r\n                            {wantToRead.length > 0 &&\r\n                                //Display only if there are books on the \"wantToRead\" shelf\r\n                                <div className=\"bookshelf\">\r\n                                    <h2 className=\"bookshelf-title\">Want to Read</h2>\r\n                                    <div className=\"bookshelf-books\">\r\n                                        <ol className=\"books-grid\">\r\n                                            {wantToRead.map((book) => (\r\n                                                <Book\r\n                                                    key={book.id}\r\n                                                    book={book}\r\n                                                    onUpdateShelf={onUpdateShelf}\r\n                                                />\r\n                                            ))}\r\n                                        </ol>\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n\r\n                            {wantToRead.length > 0 &&\r\n                                //Display only if there are books on the \"wantToRead\" shelf\r\n                                <div className=\"bookshelf\">\r\n                                    <h2 className=\"bookshelf-title\">Read</h2>\r\n                                    <div className=\"bookshelf-books\">\r\n                                        <ol className=\"books-grid\">\r\n                                            {read.map((book) => (\r\n                                                <Book\r\n                                                    key={book.id}\r\n                                                    book={book}\r\n                                                    onUpdateShelf={onUpdateShelf}\r\n                                                />\r\n                                            ))}\r\n                                        </ol>\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"open-search\">\r\n                        <Link\r\n                            to=\"/search\">\r\n                            <button>Add</button>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Main","import React, { Component } from 'react'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass Search extends Component {\r\n    static propTypes = {\r\n        books: PropTypes.array.isRequired,\r\n        onUpdateShelf: PropTypes.func.isRequired\r\n    }\r\n\r\n    state = {\r\n        results: [],\r\n        query: ''\r\n    }\r\n\r\n    updateResult = (result) => {\r\n        this.setState(() => ({\r\n            results: result\r\n        }))\r\n    }\r\n\r\n    updateQuery = (q) => {\r\n        this.setState(() => ({\r\n            query: q\r\n        }))\r\n    }\r\n\r\n    searchBooks = (query) => {\r\n\r\n        this.updateResult([])\r\n        this.updateQuery(query)\r\n        //reset state on every search. That's how I could get search to work properly\r\n\r\n        if (query.trim().length > 0) {\r\n\r\n            BooksAPI.search(query)\r\n                .then((results) => {\r\n                    //console.log(results)\r\n                    this.updateResult(results)\r\n\r\n                })\r\n\r\n        } else {\r\n            this.updateResult([])\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const { onUpdateShelf, books } = this.props\r\n\r\n        const { results, query } = this.state\r\n\r\n        return (\r\n            <div className=\"search-books\">\r\n                <div className=\"search-books-bar\">\r\n                    <Link\r\n                        className='close-search'\r\n                        to='/'>\r\n                        Close\r\n                    </Link>\r\n                    <div className=\"search-books-input-wrapper\">\r\n\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Search by title or author\"\r\n                            onChange={(event) => this.searchBooks(event.target.value)}\r\n                        />\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"search-books-results\">\r\n                    <ol className=\"books-grid\">\r\n                        {\r\n                            //Show only if results are returned and there is a valid query string\r\n                            results.length > 0 &&\r\n                            query.length > 0 &&\r\n                            results.map((book) => (\r\n                                <li key={book.id} >\r\n                                    <div className=\"book\">\r\n                                        <div className=\"book-top\">\r\n                                            {\r\n                                                book.imageLinks !== undefined ?\r\n                                                    <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: 'url( ' + book.imageLinks.thumbnail + ')' }}></div>\r\n                                                    : <div className=\"book-cover\" style={{ width: 128, height: 193, background: 'gray' }}></div>\r\n                                            }\r\n                                            <div className=\"book-shelf-changer\">\r\n                                                <select\r\n                                                    onChange={(e) => onUpdateShelf(book, e.target.value)}\r\n                                                    value={\r\n                                                        //check if the book exists in the shelf. \r\n                                                        //If so, set the value of the select to the shelf status.\r\n                                                        //If not, set the value to none.\r\n                                                        books.findIndex(x => x.id === book.id) >= 0\r\n                                                            ? books[books.findIndex(x => x.id === book.id)].shelf\r\n                                                            : 'none'\r\n                                                    }\r\n                                                >\r\n                                                    <option value=\"move\" disabled>Move to...</option>\r\n                                                    <option value=\"currentlyReading\">Currently Reading</option>\r\n                                                    <option value=\"wantToRead\">Want to Read</option>\r\n                                                    <option value=\"read\">Read</option>\r\n                                                    <option value=\"none\">None</option>\r\n                                                </select>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"book-title\">{book.title}</div>\r\n                                        <div className=\"book-authors\">\r\n                                            {\r\n                                                book.authors !== undefined &&\r\n                                                book.authors.map((author, i) => (\r\n                                                    book.authors.length - 1 !== i ? author + \", \" : author\r\n                                                ))\r\n                                            }\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </li>\r\n                            ))\r\n                        }\r\n                    </ol>\r\n\r\n                    {\r\n                        //Show only if results are not returned\r\n                        results.error === \"empty query\" &&\r\n                        <div className=\"no-results-div\">\r\n                            <p>No Results </p>\r\n                        </div>\r\n\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search","import React from 'react'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport Main from './Main'\r\nimport Search from './search'\r\n\r\nclass BooksApp extends React.Component {\r\n  state = {\r\n    showSearchPage: false,\r\n    books: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    BooksAPI.getAll()\r\n      .then((books) => {\r\n        //console.log(books);\r\n        this.setState(() => ({\r\n          books\r\n        }))\r\n      })\r\n  }\r\n\r\n  updateShelf = (book, shelf) => {\r\n\r\n    BooksAPI.update(book, shelf)\r\n      .then((result) => {\r\n        //update frontend once book is updated from API\r\n        book.shelf = shelf\r\n        this.setState((currentState) => ({\r\n          books: currentState.books.filter((x) => {\r\n            return x.id !== book.id\r\n          }).concat([book])\r\n        }))\r\n\r\n      })\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Router>\r\n          <div>\r\n            <Route exact path='/' render={() => (\r\n              <Main\r\n                books={this.state.books}\r\n                onUpdateShelf={this.updateShelf}\r\n              />\r\n            )} />\r\n            <Route path='/search' render={() => (\r\n              <Search\r\n                books={this.state.books}\r\n                onUpdateShelf={this.updateShelf}\r\n              />\r\n            )} />\r\n          </div>\r\n        </Router>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BooksApp","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}